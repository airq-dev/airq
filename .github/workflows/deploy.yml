name: Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
    deploy: 
        name: Deploy
        if: github.event.pull_request.merged
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                ref: master
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-west-1
            - uses: satackey/action-docker-layer-caching@v0.0.8
              continue-on-error: true
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build, tag, and push app image to Amazon ECR
              id: build-app-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: airq/app
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            - name: Build, tag, and push nginx image to Amazon ECR
              id: build-nginx-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: airq/nginx
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG nginx
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            - name: Fill in the new app image ID in the Amazon ECS task definition
              id: render-app-container
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: app-task-definition.json
                container-name: app
                image: ${{ steps.build-app-image.outputs.image }}
            - name: Fill in the new nginx image ID in the Amazon ECS task definition
              id: render-nginx-container
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: ${{ steps.render-app-container.outputs.task-definition }}
                container-name: nginx
                image: ${{ steps.build-nginx-image.outputs.image }}
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
                service: app
                cluster: airq
                wait-for-service-stability: true
