name: Deploy

on: push

jobs:
    # check:
    #     name: Check
    #     runs-on: ubuntu-latest
    #     steps: 
    #         - name: Checkout
    #           uses: actions/checkout@v2
    #           with: 
    #             ref: ${{ github.event.pull_request.head.sha }}
    #         - name: Setup Python
    #           uses: actions/setup-python@v1
    #           with:
    #             python-version: 3.8
    #         - name: Install Requirements
    #           run: |
    #               python -m pip install --upgrade pip
    #               pip install 'black==19.10b0'
    #         - name: Lint Check
    #           run: |
    #               black . --check
    #         - name: Static Analysis
    #           uses: jpetrucciani/mypy-check@master
    #           with:
    #             path: 'app'
    deploy: 
        name: Deploy
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                ref: ${{ github.event.pull_request.head.sha }}
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-west-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: airq/app
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: app
                image: ${{ steps.build-image.outputs.image }}
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: app
                cluster: airq
                wait-for-service-stability: true
